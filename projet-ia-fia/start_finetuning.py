import openai
import os
import time
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def upload_and_finetune(jsonl_file_path):
    """Upload le dataset et lance le fine-tuning"""
    
    # Configuration OpenAI
    openai.api_key = os.getenv('OPENAI_API_KEY')
    
    if not openai.api_key:
        print("‚ùå ERREUR: Cl√© API OpenAI non trouv√©e!")
        print("   Ajoutez OPENAI_API_KEY √† votre fichier .env")
        return
    
    print("üöÄ === FINE-TUNING F-IA SUR OPENAI ===\n")
    
    try:
        # 1. Upload du fichier de training
        print("üì§ Upload du dataset...")
        with open(jsonl_file_path, 'rb') as f:
            upload_response = openai.File.create(
                file=f,
                purpose='fine-tune'
            )
        
        file_id = upload_response.id
        print(f"‚úÖ Dataset upload√© avec succ√®s!")
        print(f"   File ID: {file_id}")
        print(f"   Taille: {upload_response.bytes} bytes")
        
        # 2. Attendre que le fichier soit trait√©
        print("\n‚è≥ Attente du traitement du fichier...")
        while True:
            file_status = openai.File.retrieve(file_id)
            if file_status.status == 'processed':
                print("‚úÖ Fichier trait√© et pr√™t!")
                break
            elif file_status.status == 'error':
                print(f"‚ùå Erreur lors du traitement: {file_status}")
                return
            else:
                print(f"   Status: {file_status.status}...")
                time.sleep(5)
        
        # 3. Cr√©er le job de fine-tuning
        print("\nü§ñ Cr√©ation du job de fine-tuning...")
        finetune_response = openai.FineTuningJob.create(
            training_file=file_id,
            model="gpt-3.5-turbo-1106",  # Mod√®le recommand√© pour le fine-tuning
            hyperparameters={
                "n_epochs": 3,  # Nombre d'√©poques d'entra√Ænement
                "batch_size": "auto",
                "learning_rate_multiplier": "auto"
            },
            suffix="f-ia-v1"  # Suffixe pour identifier votre mod√®le
        )
        
        job_id = finetune_response.id
        print(f"‚úÖ Job de fine-tuning cr√©√©!")
        print(f"   Job ID: {job_id}")
        print(f"   Mod√®le base: {finetune_response.model}")
        print(f"   Status: {finetune_response.status}")
        
        # 4. Monitoring du fine-tuning
        print(f"\nüìä Monitoring du fine-tuning...")
        print(f"   Cela peut prendre 10-30 minutes selon la charge OpenAI")
        print(f"   Job ID: {job_id}")
        print(f"\nüîó Vous pouvez aussi suivre le progr√®s sur:")
        print(f"   https://platform.openai.com/finetune/{job_id}")
        
        # Monitoring automatique (optionnel)
        monitor_job = input("\n‚ùì Voulez-vous monitorer automatiquement? (y/n): ")
        
        if monitor_job.lower() == 'y':
            print("\n‚è≥ Monitoring en cours...")
            start_time = time.time()
            
            while True:
                job_status = openai.FineTuningJob.retrieve(job_id)
                elapsed = int(time.time() - start_time)
                
                print(f"   [{elapsed//60:02d}:{elapsed%60:02d}] Status: {job_status.status}")
                
                if job_status.status == 'succeeded':
                    print(f"\nüéâ FINE-TUNING R√âUSSI!")
                    print(f"   Mod√®le fine-tun√©: {job_status.fine_tuned_model}")
                    print(f"   Dur√©e totale: {elapsed//60}m {elapsed%60}s")
                    
                    # Sauvegarder les infos du mod√®le
                    with open('model_info.txt', 'w') as f:
                        f.write(f"Mod√®le F-IA Fine-tun√©\n")
                        f.write(f"===================\n")
                        f.write(f"Job ID: {job_id}\n")
                        f.write(f"Mod√®le: {job_status.fine_tuned_model}\n")
                        f.write(f"Cr√©√© le: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                        f.write(f"Dataset: {jsonl_file_path}\n")
                        f.write(f"Exemples: 79\n")
                        f.write(f"Tokens: ~10,058\n")
                    
                    print(f"   ‚ÑπÔ∏è Infos sauv√©es dans model_info.txt")
                    break
                    
                elif job_status.status == 'failed':
                    print(f"\n‚ùå √âCHEC DU FINE-TUNING")
                    print(f"   Erreur: {job_status.error}")
                    break
                    
                elif job_status.status == 'cancelled':
                    print(f"\n‚ö†Ô∏è Fine-tuning annul√©")
                    break
                
                time.sleep(30)  # V√©rifier toutes les 30 secondes
        else:
            print(f"\nüìù Job lanc√©! R√©cup√©rez le mod√®le plus tard avec:")
            print(f"   Job ID: {job_id}")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        print(f"   V√©rifiez votre cl√© API et votre connexion internet")

if __name__ == "__main__":
    upload_and_finetune("f-ia-training-v1.jsonl")
